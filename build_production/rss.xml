<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>Jethro May</title>
        <link>https://jethromay.dev</link>
        <description><![CDATA[]]></description>
        <atom:link href="https://jethromay.dev/rss.xml" rel="self" type="application/rss+xml" />
        <language></language>
        <lastBuildDate>Wed, 01 Dec 2021 10:49:00 +0000</lastBuildDate>

                    <item>
                <title><![CDATA[Simplifying 'Belongs To' Relationship Queries]]></title>
                <link>https://jethromay.dev/blog/simplifying-belongs-to-relationship-queries</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/simplifying-belongs-to-relationship-queries</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>A useful addition to the <a href="https://laravel.com">Laravel</a> framework was added recently, which allows for a cleaner syntax when retrieving items via a 'belongsTo' relationship.</p>

<p>Previously if you wanted to retrieve posts for a specific user you would build out a where clause as follows:</p>

<pre><code class='language-php torchlight' style=''><div class='line'>use App\Models\Post;</div><div class='line'></div><div class='line'>$posts = Post::where('user_id', $user-&gt;id)-&gt;get();</div></code></pre>

<p>A newer and cleaner syntax allows you to do the following:</p>

<pre><code class='language-php torchlight' style=''><div class='line'>$posts = Post::whereBelongsTo($user)-&gt;get();</div></code></pre>

<p>You may also manually specify which relationship to query by providing the name of the relationship as the second argument:</p>

<pre><code class='language-php torchlight' style=''><div class='line'>$posts = Post::whereBelongsTo($user, 'author')-&gt;get();</div></code></pre>

<p>I'm always a huge fan of changes like these that improve code readability.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Wed, 01 Dec 2021 10:49:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Testing Mails Using The Command Line]]></title>
                <link>https://jethromay.dev/blog/sending-a-test-mail-from-the-command-line</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/sending-a-test-mail-from-the-command-line</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>Sometimes you might need to test Laravel mails using the command line, to see if they are being sent/received.</p>

<p>I will often use <a href="https://a.paddle.com/v2/click/103161/122770?link=2106" class="text-niagara hover:underline" target="_blank">Tinkerwell</a> and <a href="https://a.paddle.com/v2/click/103161/122770?link=2990" class="text-niagara hover:underline" target="_blank">HELO</a> for this but you can also use <code>php artisan tinker</code> and your regular email client.</p>

<p>Simply paste in the following snippet and update the email address to send the email:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>Mail::raw('Test Mail', function($msg) {</div><div class='line'>    $msg-&gt;to('email@example.com')-&gt;subject('Test Mail');</div><div class='line'>});</div></code></pre>

<p>If you are on PHP 7.4 +, you can simplify the above using short arrow functions:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>Mail::raw('Test Mail', fn($msg) =&gt; $msg-&gt;to('email@example.com')</div><div class='line'>    -&gt;subject('Test Mail'));</div></code></pre>

<p>After running the above snippet you will receive an email if everything has worked correctly:</p>

<figure>
    <img src="/assets/images/successful-email.png" alt="A test email sent using the code snippet." loading="lazy">
    <figcaption>A test email sent using the code snippet.</figcaption>
</figure>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Mon, 02 Aug 2021 10:46:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[2020 In Review]]></title>
                <link>https://jethromay.dev/blog/2020-in-review</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/2020-in-review</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>2020 has been a year to forget for many people around the world. There have been many ups and downs in everyone's lives. I will be reflecting on the year and what I achieved.</p>

<p>At the start of the year, up until June/July, I worked on many personal projects and upskilled myself on various topics. I then started to feel quite a bit of burnout.</p>

<p>I hadn't taken a real break in over a year.</p>

<p>The burnout had pretty much destroyed a lot of the passion I had for coding outside of working hours. I decided to take a break and not work on coding after hours or on weekends. I hoped that I would naturally rekindle the fire that I once had.</p>

<p>Many months passed where I felt stuck and wasn't sure where to go and what to do. At this point, I realised that I needed to take my mental health seriously.</p>

<p>I went to therapy and spoke about my stresses and anxiety, which were compounded by various situations.</p>

<p>I cannot recommend this enough.</p>

<p>It allowed me to think clearly and cope with the various stresses I was experiencing. I went through a variety of different changes in my working life as well as my personal life. I needed to take a step back and process these changes.</p>

<p>The feeling of burnout and stress/anxiety started to disappear. My passion for coding also began to return.</p>

<p>I took a further step back and thought, what did I achieve in 2020? What positive changes happened in my life?</p>

<h2>My 2020 goals:</h2>

<ul class="list-decimal list-inside">
    <li class="pl-0">Redesign my website.</li>
    <li class="pl-0">Start blogging.</li>
    <li class="pl-0">Move into a bigger home.</li>
    <li class="pl-0">Secure a job overseas.</li>
</ul>

<p>Let's go through each of them, keeping in mind these are in no particular order.</p>

<h3>Redesign my website</h3>

<p>At the start of 2020, I wanted to redesign my website. I wanted to add a blog to my website as well as add a refreshed design. Seeing as I had already started tinkering with Go, I decided to give Hugo a try. I tweaked the design throughout 2020, adding small improvements to the overall design and functionality.</p>

<p>I achieved this goal, and I will most likely redesign the website at some point this year. I may even switch to a different language or framework entirely.</p>

<h3>Start blogging</h3>

<p>I didn't write nearly enough articles in 2020 but I achieved this goal and wrote five articles:</p>

<ul class="list-decimal list-inside">
    <li class="!pl-0">
        <a href="https://jethromay.dev/blog/2020-website-refresh/" class="hover:underline">2020 Website Refresh</a>
    </li>
    <li class="!pl-0">
        <a href="https://jethromay.dev/blog/migrating-my-website-to-hugo/" class="hover:underline">Migrating My Website To Hugo</a>
    </li>
    <li class="!pl-0">
        <a href="https://jethromay.dev/blog/get-down-with-markdown/" class="hover:underline">Get Down With Markdown</a>
    </li>
    <li class="!pl-0">
        <a href="https://jethromay.dev/blog/8-html-elements-you-might-not-know-about/" class="hover:underline">8 HTML Elements You Might Not Know About</a>
    </li>
    <li class="!pl-0">
        <a href="https://jethromay.dev/blog/getting-started-with-version-control/" class="hover:underline">Getting Started With Version Control</a>
    </li>
</ul>

<p>I have begun plotting out a few ideas for 2021's articles, which I will likely be starting once I return from my much-needed break.</p>

<h3>Move into a bigger home</h3>

<p>My fiance and I, (now wife) wanted to move into a bigger home. While we were comfortable in our previous home, we wanted more space and a little more privacy. We achieved that goal towards the end of 2020, moving into our current home.</p>

<h3>Secure a job overseas</h3>

<p>A major highlight for 2020 was getting a job overseas. I was lucky enough to be given the opportunity at a company based in London, which I accepted towards the end of 2020. The plan is to move over to the UK in 2021 when the pandemic allows us to.</p>

<h2>Other accomplishments in 2020:</h2>

<p>2020 also saw a couple of other accomplishments.</p>

<h3>I got engaged and married in 2020</h3>

<p>I got engaged and married to my soul mate. It was without a doubt challenging, getting married during a pandemic but we kept it small and low-key.</p>

<p>It was the biggest highlight of 2020 and the best day of our lives so far!</p>

<h3>I worked on my health</h3>

<p>Not only did I work on my physical health, but I also decided to take my mental health seriously. The tech industry can be very stressful and overwhelming at times. As an individual in the tech industry, it is paramount to look after your physical and mental wellbeing. Stress and burnout can be a killer that not only affects your working life but your personal life too.</p>

<h3>Closing thoughts on 2020</h3>

<p>Overall, 2020 was a good year for me, full of many personal and work-related accomplishments. Some times were challenging and generally unpleasant, but, I only wish to focus on the positive. I firmly believe 2021 will be a great year not only for myself but for many other people.</p>

<h2>My goals for 2021:</h2>

<ul class="list-decimal list-inside">
    <li class="!pl-0">
    Move to the UK.
    </li>
    <li class="!pl-0">
    Learn more Go.
    </li>
    <li class="!pl-0">
    Improve my fitness.
    </li>
    <li class="!pl-0">
    Write more.
    </li>
    <li class="!pl-0">
    Release a product and gain at least ten paying customers.
    </li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Sat, 02 Jan 2021 08:39:03 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Getting Started With Version Control]]></title>
                <link>https://jethromay.dev/blog/getting-started-with-version-control</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/getting-started-with-version-control</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>One of the fundamental topics that every developer needs to learn is version control and how to work with a codebase which could be updating and changing over time.</p>

<p>A version control system allows multiple people to work on a single project at the same time. Each person will have a copy of a project running on their computer, allowing them to make changes which won't affect the rest of the team. Once complete, the developer will be able to submit or push these updates to the version control system and ultimately merge their changes into the main project. The rest of the team will then have access to these new changes by pulling them down into their version of the project on their computers.</p>

<p>Each change will have a timestamp as well as information about who made that change, usually the developer's name and email address.</p>

<p>There are various types of version control systems, such as Git, Mercurial and many more. In this tutorial, we will be covering the basics of version control using Git utilizing a platform called GitHub.</p>

<h2>What is Git?</h2>

<p>Git is a version control system used for tracking changes in a codebase during development. The purpose of Git is to coordinate changes among developers; it can, however, track changes in any set of files.</p>

<h2>What is GitHub?</h2>

<p>GitHub is a Git repository hosting platform that allows developers to store their code which can be publically visible or private from the rest of the world. It keeps track of the various changes made to each of your projects and presents itself in an intuitive and easy to use interface. It is free to use but also offers a premium plan. Read more about their features <a href="https://github.com/features">here</a>.</p>

<h2>First Steps:</h2>

<p>The easiest way to get started is by creating an account on GitHub at the <a href="https://github.com/join">following link</a>. Once you have created an account and you have logged in, you will be able to start creating repositories used to store your code. The home page will contain a feed which will display recent activity on repositories from people you follow on GitHub, so at first, you will not see anything here.</p>

<p>We are now ready to create our first repository! To do this, click on the + symbol in the top right of the screen, which will provide you with a few options, 'New repository', 'Import repository', 'New gist', 'New organization' and lastly 'New project'.</p>

<figure>
    <img src="/assets/images/new-repository.png" alt="GitHub dropdown used to create a new repository" loading="lazy">
    <figcaption>Select ‘New repository’ to create a new repository</figcaption>
</figure>

<p>All repositories require a unique name on your account, along with an optional description. You can control who can see and interact with this repository by setting the visibility to public or private. Additionally, you may choose to include a <code>README.md</code> file, a <code>.gitignore</code> file and a <code>LICENSE.md</code> file, for now, we will not add either of these additional files.</p>

<figure>
    <img src="/assets/images/create-repository.png" alt="Create a new GitHub repository" loading="lazy">
    <figcaption>Create a new GitHub repository</figcaption>
</figure>

<p>Once you have filled in the required information, click on 'Create repository' and you will be good to go!</p>

<h2>Setup:</h2>

<p>There are two primary ways of interacting with a repository on GitHub, using the <a href="https://desktop.github.com/">desktop app</a> and by using the command line. This guide will cover using the command line, as well as using GitHub's <a href="https://cli.github.com/">new CLI tool</a> but feel free to use the desktop application or another GUI (Graphical User Interface) if you are more comfortable with a visual representation of the process.</p>

<blockquote>
  <p>To interact with Git via the command line, you will need to have Git installed on your machine. Git comes preinstalled on Mac, however, on Windows it does not. If you are on Windows, please follow <a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">this guide</a> to install Git on your machine.</p>
</blockquote>

<p>The GitHub CLI (Command Line Interface) allows you to easily interact directly with your repositories and even the GitHub API (Application Programming Interface.) It's worth noting that you don't have to use this CLI tool if you choose to work with the command line, you can still work with Git without it.</p>

<p>For us to use this new CLI tool, we will install it with instructions found at the following <a href="https://github.com/cli/cli">link</a>.</p>

<p>Once installed, open up a terminal window if you don't already have one open and the last step to take is to authenticate with our GitHub account. We do this by typing the following:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>gh auth login</div></code></pre>

<p>All interactions with the GitHub CLI start with 'gh' followed by the command. A full list of the currently available commands is available here.</p>

<p>Follow the prompts which will allow you to log in via the browser and type in a code. Once you have successfully logged in, it will ask you to select your default git protocol which will be either https or ssh. We won't be covering how to setup ssh keys, selecting https will be the final step in our setup.</p>

<h2>Cloning Our Repo:</h2>

<p>Cloning the GitHub repository is quite simple, we will use the following command in our terminal:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>gh repo clone &lt;repository&gt; &lt;directory&gt;</div></code></pre>

<p>Replace <repository> with the full URL to your GitHub repository and replace <directory> with the name of the folder you would like to store this code. (Don't include the left/right chevron symbols.)</p>

<p>Alternatively, if you run the command inside a folder that you have already created you can omit the directory and instead use a period. This will clone the repository into your current folder::</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>gh repo clone &lt;repository&gt; .</div></code></pre>

<p>We are now ready to start adding and removing files from our repository.</p>

<h2>Pushing and Pulling Changes:</h2>

<p>Once you have successfully cloned a repository, you will now be able to push code changes as well as pull updates onto your locally running version of the project. At the time of writing this article, there are no commands in the CLI which will allow you to push or pull code, so we will use standard git commands to do that.</p>

<p>Open the project in any code editor of your choice and create a new file, for example, <code>index.html</code>. Once you have added a new file, you will be ready to push this new file to your repository.</p>

<p>Before pushing new changes, you must ensure that you have all of the repositories files in your local version of the project. Assuming you are using the default GitHub branch name, you will run the following command in your terminal:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>git pull</div></code></pre>

<p>or</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>git pull origin main</div></code></pre>

<p>Once you have pulled down any changes, you will be ready to add your files to a commit and push them to the repository. We can do this by running the following commands:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>git add index.html</div><div class='line'>git commit -m &quot;Initial commit&quot;</div></code></pre>

<p>The first command will add the <code>index.html</code> file to your commit, and the second command will commit your file with a message. The '-m' option indicates what your commit message is, followed by the actual message. If you have a lot of changes, you can omit the 'git add' step and run the following command:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>git commit -a -m &quot;Initial commit&quot;</div></code></pre>

<p>This command will add all of your new changes to the commit.</p>

<p>Our last step is to push the code!</p>

<p>Once you are happy with your commit and message, run the following command to push code to your GitHub repository:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>git push</div></code></pre>

<p>If you have followed each step correctly, you will now be able to see your newly changed files in your GitHub repository. If you have chosen this repository to be publically visible, send the link to your friends and they will now be able to pull down your code from this repository.</p>

<h2>Conclusion:</h2>

<p>We have only scratched the surface of what can be achieved with version control, covering the basics of what Git is, how to create a repository on GitHub, how to setup GitHub's new CLI tool, cloning a repository, pulling code and pushing newly created files.</p>

<p>There are many different aspects of Git that we did not cover, a few of them are:</p>

<ol>
<li>Branches</li>
<li>Merging vs Rebasing</li>
<li>Resetting, Checking Out, Reverting</li>
<li>Git Log</li>
<li>Hooks</li>
</ol>

<p>If you would like this to become a series in which we cover various other topics, let me know via Twitter!</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Sun, 18 Oct 2020 08:44:56 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[8 HTML Elements You Might Not Know About]]></title>
                <link>https://jethromay.dev/blog/8-html-elements-you-might-not-know-about</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/8-html-elements-you-might-not-know-about</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>HTML which stands for "Hypertext Markup Language," is used to structure the content of a web page. It consists of a series of elements which enclose different parts of the page content to make them appear or act in a certain way.</p>

<p>As a developer, being able to write high-quality, accessible and semantic HTML is a great skill to have in your toolset.</p>

<p>In this guide, we will cover eight elements that you may not have heard of, or used before and look at examples of how you could use them in your next project.</p>

<h2>Abbreviation:</h2>

<p>The <code>&lt;abbr&gt;</code> tag defines text which is an abbreviation or an acronym, it also allows for an optional title attribute to provide a full description of the abbreviation or acronym.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Abbreivation Tag." src="https://codepen.io/jethro-may/embed/MWKNxqg?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/MWKNxqg'>Abbreivation Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;p&gt;This document can be styled with &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt;&lt;/p&gt;</div></code></pre>

<p>The <code>&lt;abbr&gt;</code> tag has full browser support. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr#Browser_compatibility">here</a>.</p>

<h2>Cite:</h2>

<p>The <code>&lt;cite&gt;</code> tag defines the reference to a cited creative work, and it must include the title of that work.  Examples of where this can be used include the title of a song, book, research paper, website or blog post etc.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Cite Tag." src="https://codepen.io/jethro-may/embed/ZEQgPNG?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/ZEQgPNG'>Cite Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;p&gt;</div><div class='line'>  &lt;cite&gt;Hey Jude&lt;/cite&gt; by The Beatles was released in 1968.</div><div class='line'>&lt;/p&gt;</div></code></pre>

<p>The <code>&lt;cite&gt;</code> tag has full browser support. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite#Browser_compatibility">here</a>.</p>

<h2>Details:</h2>

<p>The <code>&lt;details&gt;</code> element creates a widget which can be opened or closed by the user. The default state of the widget is closed, opening the widget will reveal the hidden content inside of the element.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Details Tag." src="https://codepen.io/jethro-may/embed/NWxQJJJ?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/NWxQJJJ'>Details Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;details&gt;</div><div class='line'>  This content is hidden.</div><div class='line'>&lt;/details&gt;</div></code></pre>

<p>The <code>&lt;details&gt;</code> element is supported in all browsers apart from Internet Explorer. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details#Browser_compatibility">here</a>.</p>

<h2>Mark:</h2>

<p>The <code>&lt;mark&gt;</code> tag will define text which should be marked or highlighted by the browser.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Mark Tag." src="https://codepen.io/jethro-may/embed/GRoVeaG?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/GRoVeaG'>Mark Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;p&gt;Sometimes you need to &lt;mark&gt;highlight&lt;/mark&gt; text.&lt;/p&gt;</div></code></pre>

<p>The <code>&lt;mark&gt;</code> tag has full browser support. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark#Browser_compatibility">here</a>.</p>

<h2>Output:</h2>

<p>The <code>&lt;output&gt;</code> tag specifies the result of a calculation. In the following example, you can select a value between 0 - 100 as well as enter a second number into the second element, outputting the sum of the two numbers.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Output Tag." src="https://codepen.io/jethro-may/embed/rNxXbxM?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/rNxXbxM'>Output Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;form oninput=&quot;result.value=parseInt(number.value)+parseInt(range.value)&quot;&gt;</div><div class='line'>  &lt;input type=&quot;range&quot; id=&quot;range&quot; name=&quot;range&quot; value=&quot;50&quot; /&gt; +</div><div class='line'>  &lt;input type=&quot;number&quot; id=&quot;number&quot; name=&quot;number&quot; value=&quot;50&quot; /&gt; =</div><div class='line'>  &lt;output name=&quot;result&quot; for=&quot;number range&quot;&gt;100&lt;/output&gt;</div><div class='line'>&lt;/form&gt;</div></code></pre>

<p>The <code>&lt;output&gt;</code> element is supported in all browsers apart from Internet Explorer. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output#Browser_compatibility">here</a>.</p>

<h2>Summary:</h2>

<p>The <code>&lt;summary&gt;</code> tag defines a heading for the <code>&lt;details&gt;</code> element. The <code>&lt;summary&gt;</code> tag must be the first child element inside the <code>&lt;details&gt;</code> element.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Summary Tag." src="https://codepen.io/jethro-may/embed/qBbevzj?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/qBbevzj'>Summary Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;details&gt;</div><div class='line'>  &lt;summary&gt;Summary Heading&lt;/summary&gt;</div><div class='line'>  This content is hidden.</div><div class='line'>&lt;/details&gt;</div></code></pre>

<p>The <code>&lt;summary&gt;</code> tag is supported in all browsers apart from Internet Explorer. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary#Browser_compatibility">here</a>.</p>

<h2>Time:</h2>

<p>The <code>&lt;time&gt;</code> tag represents a time or date value. Optionally, you may include a 'datetime' attribute which will translate the value into a machine-readable format. Using the <code>&lt;time&gt;</code> tag allows for better search engine results.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="Time Tag." src="https://codepen.io/jethro-may/embed/RwrXdXy?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/RwrXdXy'>Time Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;p&gt;This post was published on &lt;time datetime=&quot;2020-08-03&quot;&gt;3 August, 2020&lt;/time&gt;.&lt;/p&gt;</div></code></pre>

<p>The <code>&lt;time&gt;</code> tag is supported in all browsers apart from Internet Explorer. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time#Browser_compatibility">here</a>.</p>

<h2>Word Break Opportunity:</h2>

<p>The <code>&lt;wbr&gt;</code> tag tells the browser where the ideal location is to break text when the browser window size changes.</p>

<iframe height="265" style="width: 100%;" scrolling="no" title="WBR Tag." src="https://codepen.io/jethro-may/embed/mdVNgbK?height=265&theme-id=dark&default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href='https://codepen.io/jethro-may/pen/mdVNgbK'>WBR Tag.</a> by Jethro May
  (<a href='https://codepen.io/jethro-may'>@jethro-may</a>) on <a href='https://codepen.io'>CodePen</a>.
</iframe>

<pre><code class='language-html torchlight' style=''><div class='line'>&lt;p&gt;This is a very loooooooooo&lt;wbr&gt;oooo&lt;/wbr&gt;oooooooooooong sentence showing us how to use this tag.&lt;/p&gt;</div></code></pre>

<p>The <code>&lt;wbr&gt;</code> tag is supported in all browsers apart from Internet Explorer. View a detailed list of which browser versions this tag can be used in, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr#Browser_compatibility">here</a>.</p>

<h2>Conclusion</h2>

<p>In this article, we reviewed a variety of different HTML tags that you can use in your projects. There are many other useful HTML tags, all of which seek out to solve specific problems. I hope you have learnt a thing or two and will be able to use these tags in your projects!</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Sun, 02 Aug 2020 09:43:13 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Get Down With Markdown]]></title>
                <link>https://jethromay.dev/blog/get-down-with-markdown</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/get-down-with-markdown</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>Most developers will encounter Markdown files at some stage of their careers, via repository platforms such as GitHub or Bitbucket. Markdown files use the <code>.md</code> file extension and will contain specific syntax used to construct the file. Many content management systems and frameworks support markdown out the box, so to start using it is as simple as creating a file and adding its content.</p>

<p>Markdown files are extremely powerful because it allows the creator the ability to easily construct beautiful and semantic markup without having to build it with code. They are often used inside git repositories as documentation but have also grown to be extremely popular on blogging platforms. I personally store my posts on <a href="https://github.com/jethromay/jethromay.dev/">GitHub</a> which <a href="https://gohugo.io/">Hugo</a> then turns into semantic HTML.</p>

<p>In this tutorial, I will cover some basic syntax used inside Markdown files which will allow you to start creating beautifully structured content.</p>

<h2>Headings:</h2>

<p>Headings will be represented by adding a # symbol before the title. The number of # symbols signifies the order of importance, so by adding a single # it will represent a <code>&lt;h1&gt;</code> tag. Adding additional # symbols will decrease the order of importance with the number of symbols indicating the appropriate <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code> tag.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'># Heading 1 &lt;h1&gt;</div><div class='line'>## Heading 2 &lt;h2&gt;</div><div class='line'>### Heading 3 &lt;h3&gt;</div><div class='line'>#### Heading 4 &lt;h4&gt;</div><div class='line'>##### Heading 5 &lt;h5&gt;</div><div class='line'>###### Heading 6 &lt;h6&gt;</div></code></pre>

<h2>Paragraphs:</h2>

<p>There is no specific syntax used when writing paragraphs in markdown syntax. Paragraphs can be created by adding one or more blank lines:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>I am a paragraph.</div><div class='line'></div><div class='line'>I am another paragraph.</div></code></pre>

<p>When adding headings and paragraphs, make sure they are all separated by a new line and are not on top of each other.</p>

<h2>Line breaks:</h2>

<p>Line breaks are similar to paragraphs except instead of a single blank line you will add two blank lines to signify a line break.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>I am a paragraph with a line break below me.</div><div class='line'></div><div class='line'>I am a paragraph with a line break above me.</div></code></pre>

<h2>Bold Text:</h2>

<p>As we go further into this tutorial, you will find that there are many ways to achieve the same result. For example, bold text can be added to a document in the following ways:</p>

<p><code>**Bold text**</code> will render <strong>Bold text</strong></p>

<p><code>__Bold text__</code> will render <strong>Bold text</strong></p>

<h2>Italic text:</h2>

<p>The syntax for italic text is similar to that of bold text. A single asterisk or underscore will be used on either side of the text or phrase.</p>

<p><code>*Italic text*</code> will render: <em>Italic text</em></p>

<p><code>_Italic text_</code> will render: <em>Italic text</em></p>

<h2>Lists:</h2>

<p>Lists have varying syntax.</p>

<p>To create ordered lists, simply add items with numbers followed by a period. Each list item will need to be on a new line.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>1. Ordered list item #1</div><div class='line'>2. Ordered list item #2</div><div class='line'>3. Ordered list item #3</div></code></pre>

<p>They do not need to be in numerical order:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>1. Ordered list item #1</div><div class='line'>3. Ordered list item #3</div><div class='line'>2. Ordered list item #2</div></code></pre>

<p>You may also nest lists:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>1. Ordered list item #1</div><div class='line'>2. Ordered list item #2</div><div class='line'>3. Ordered list item #3</div><div class='line'>    1. Ordered nested list item #1</div><div class='line'>    2. Ordered nested list item #2</div></code></pre>

<p>To create an unordered list, simply add either a dash (-), asterisk (*), or plus signs (+) in front of your line items.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>- Unordered list item #1</div><div class='line'>- Unordered list item #2</div><div class='line'>- Unordered list item #3</div></code></pre>

<p>Much like the ordered list, the same principle applies when nesting unordered lists.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>- Unordered list item #1</div><div class='line'>- Unordered list item #2</div><div class='line'>- Unordered list item #3</div><div class='line'>    - Unordered nested list item #1</div><div class='line'>    - Unordered nested list item #2</div><div class='line'>    - Unordered nested list item #3</div></code></pre>

<h2>Links:</h2>

<p>To create a link, enclose the text you wish to link with square brackets followed by the link in parentheses.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>[example.com](https://example.com/)</div></code></pre>

<p><a href="https://example.com/">example.com</a></p>

<p>If you would like to add a title to the link, you would add the following:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>[example.com](https://example.com/ &quot;Link title&quot;)</div></code></pre>

<p><a href="https://example.com/" title="Link title">example.com</a></p>

<p>Links can also be created by adding a chevron on either side of the link:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>&lt;https://example.com&gt;</div></code></pre>

<p><a href="https://example.com">https://example.com</a></p>

<p>Using the above syntax is especially useful for email addresses:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>[Email us!](mailto:email@example.com)</div></code></pre>

<p><a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x65;&#109;&#x61;&#105;&#x6c;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;">Email us!</a></p>

<h2>Images:</h2>

<p>Images have a similar syntax to links, except they have an exclamation mark in front of the square brackets, followed by the alt text inside the square brackets and the path to the image in parentheses.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>![Alt text](/assets/images/image-1.jpg)</div></code></pre>

<p><img src="/assets/images/image-1.jpg" alt="Alt text" /></p>

<p>Much like links a title can also be added to an image by adding the following:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>![I am the alt text](/assets/images/image-2.jpg &quot;Image title&quot;)</div></code></pre>

<p><img src="/assets/images/image-2.jpg" alt="I am the alt text" title="Image title" /></p>

<h2>Block Quotes:</h2>

<p>A blockquote can be created by adding a right-facing chevron <code>&gt;</code> in front of a paragraph.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>&gt; I am a blockquote</div></code></pre>

<p>Using this syntax will render the following:</p>

<blockquote>
  <p>I am a blockquote</p>
</blockquote>

<h2>Code:</h2>

<p>Code blocks can be added to markdown files by enclosing the word, phrase or code with backticks. (``)</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>`A code block using backticks`</div></code></pre>

<p>Alternatively you may create code blocks by indenting by at least four spaces or with one tab:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>A code block created using four spaces or one tab.</div></code></pre>

<h2>Horizontal rules:</h2>

<p>There are a number of ways to add a horizontal rule to a document by either adding three or more asterisks (***), dashes or underscores:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>---</div><div class='line'></div><div class='line'>_________________</div><div class='line'></div><div class='line'>***</div></code></pre>

<p>Any of the above will render:</p>

<hr />

<h2>HTML:</h2>

<p>Some Markdown applications or frameworks allow you to insert HTML tags into the file. This is useful if you would like to use certain HTML tags instead of Markdown syntax. Using this approach it is much easier to change the attributes of an element.</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>I am using regular **bold** syntax with an HTML link &lt;a href=&quot;#&quot; class=&quot;text-blue-100&quot;&gt;Link&lt;/a&gt;</div></code></pre>

<h2>Conclusion:</h2>

<p>As you can see Markdown is extremely powerful and user-friendly, it has many benefits and provides creators with an easy way to create beautifully structured content. It is a huge time saver and allows you to focus on what truly matters most, your content.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Sun, 19 Jul 2020 10:58:51 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Migrating My Website To Hugo]]></title>
                <link>https://jethromay.dev/blog/migrating-my-website-to-hugo</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/migrating-my-website-to-hugo</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>During the last 12 months I have gone through various iterations of my website, which was created to publish educational articles on various tech related topics. Originally built with Next.js and hosted on Vercel, this setup didn’t fit my needs for a couple of reasons.</p>

<p>First and foremost I have come to the realisation that I much prefer working with static HTML, CSS and a sprinkling of JavaScript where needed, returning to the basics that made the web so wonderful in the first place. It enables me to quickly scaffold projects without worrying about the complexity of React, Vue or other frameworks. This means that while Next.js is relatively lightweight compared to other frameworks, it is still too verbose for my needs.</p>

<p class="highlight">
This doesn’t mean that everything I am working on is completely vanilla these days. During my day job at <a href="https://plusnarrative.com/">PlusNarrative</a> we primarily build PHP based projects in Laravel and WordPress. The former being a framework that I am extremely passionate about. In my personal projects I work with a variety of languages/frameworks such as PHP, Laravel, Go, JavaScript, Alpine.js, Livewire and last but certainly not least Tailwind.
</p>

<p>I thoroughly enjoy working with Tailwind which encourages styling to be added in the markup as opposed to the stylesheet. A personal pain point with React is how, when declaring classes on each component, I cannot simply use class="", I have to use className="" which seems a little unnecessary. Hopefully this is changed in future versions of React.</p>

<p>I also dislike how my markdown files (which were actually .MDX files) contain code to set metadata for the post. If I am using an app to write or edit my files, I have to bring them across from the app and add the necessary code to the top of each file. (Perhaps there is a way around this, but I never found one.)</p>

<p>Last but not least, I found it tricky working with .env files and variables I did not want to expose to the public.</p>

<p>I initially decided to use this stack because I wanted to avoid paying monthly server costs, managing a server and worrying about deploying my updates usually associated with PHP based projects.</p>

<p>It became a tedious task to work with the current setup, update it and plan future additions to the website let alone write content. I wanted to enjoy working on my website again and create content other people from around the world would hopefully find valuable.</p>

<h2>Enter <a href="https://gohugo.io/">Hugo</a>.</h2>

<p>Over the past few months I have been casually learning Go, simply because I wanted to learn a language that was completely different from what I am used to, PHP. After going down this path I began seeing a buzz around a framework called Hugo and found out that it is a static site generator built on top of Go. My interest was piqued. Upon landing on the homepage I noticed Hugo’s bold claim to be, and I quote:</p>

<blockquote>
  <p>"The world’s fastest framework for building websites."</p>
  
  <p>Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again.</p>
</blockquote>

<p>In a nutshell this is exactly what I wanted, a framework that is incredibly fast, flexible and most importantly makes working on my website fun again. I already knew how fast Go projects were, but after further research followed by watching their speed benchmark <a href="https://www.youtube.com/watch?v=CdiDYZ51a2o&amp;feature=emb_title">video</a>, I was blown away. I finally settled on the idea of migrating my existing website to this framework.</p>

<h2>Setup:</h2>

<p>I predominantly work on Mac so for the purpose of this tutorial I will not be covering Windows or Linux implementations. This tutorial will not cover every aspect of Hugo, but it will go through the various steps I took when setting up my project.</p>

<p>In order to get started with Hugo, the easiest way is by making use of <a href="https://brew.sh/">Homebrew</a>.</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>brew install hugo</div></code></pre>

<p>Once this is installed you can create a new Hugo project by running the following command:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>hugo new site site_name</div></code></pre>

<p>There are many other helpful commands that can be used in Hugo projects which can be found <a href="https://gohugo.io/commands/">here</a>.</p>

<p>Throughout this tutorial I will be using an opinionated folder structure as well as personal practices that I make use of when building projects.</p>

<h2>Folder structure:</h2>

<p>After running the command to create a new project, Hugo will generate the following directory structure:</p>

<figure>
    <img src="/assets/images/folder-structure.jpg" alt="Hugo folder structure" loading="lazy">
    <figcaption>Hugo folder structure</figcaption>
</figure>

<p>This folder structure may seem foreign at first, but I can assure you that once you get accustomed to it like most things, it is relatively straight forward.</p>

<p><strong>Archetypes</strong>: An archetype is a content template which contains a set of preconfigured <a href="https://gohugo.io/content-management/front-matter/">frontmatter</a> variables, you can add your own or modify them in any way that you see fit. For example if you would like to create a frontmatter template that would be used for posts, you would add a file called posts.md in the archetypes directory. When Hugo creates a post it will use the variables specified in this file.</p>

<p>My archetype directory contains one template for posts, which has the following frontmatter variables defined:</p>

<figure>
    <img src="/assets/images/archetype-posts.jpg" alt="Hugo archetype configuration" loading="lazy">
    <figcaption>Hugo archetype configuration</figcaption>
</figure>

<p>This means that each post will have a title, date and a slug.</p>

<p>To use this template, I can run the following command:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>hugo new posts/new-post.md</div></code></pre>

<p>This command creates a new post in the content/posts directory with the frontmatter values populated accordingly.</p>

<p><strong>Content</strong>: Website content will be stored in this directory. The content directory can also have nested folders which would correspond to the various content sections of your website. For example, if your website has a blog, you would create a blog folder which would contain the websites articles.</p>

<p><strong>Data</strong>: I did not need to make use of this folder, so I removed it but this directory can be used when you would like to add additional data/configuration for Hugo to utilize when generating your website. The files created in this directory must use the YAML, TOML or JSON file extensions.</p>

<p><strong>Layout</strong>: The layouts' directory contains the various layouts used for posts, pages and other components on your website. There are a number of different templates that you can make use of, the two most common layouts are single.html and list.html. When creating a layout for a post or page, a single.html template file must be used. When creating a page that renders multiple types of content a list.html file must be used.</p>

<p><strong>Static</strong>: The static directory is pretty straight forward, it stores static assets for your website, such as CSS, JS and images. The content of this directory is stored as is, so Hugo won’t modify it.</p>

<p><strong>Assets</strong>: Hugo does not generate this directory by default. If you would like CSS/JS assets processed by Hugo’s <a href="https://gohugo.io/hugo-pipes/">pipes</a>, you may create this directory. I utilize pipes in the following way:</p>

<p>I retrieve the content of the stylesheet, which then passes it through PostCSS which will apply my browser prefixes and minify the output. Once minified, the CSS is injected into a style tag within the head tags of my website.</p>

<p>Note: Using the assets' directory is optional, I created it so that I could make use of the above mentioned process.</p>

<p><strong>Config.toml</strong>: The basic configuration for the project will be stored within this file. It can also be created in a number of formats such as JSON or YAML but the concept remains the same. There is a wide variety of <a href="https://gohugo.io/getting-started/configuration/#all-configuration-settings">directives</a> that ship with Hugo which can be used that will enable you to fine tune your environment. Most projects will have a single config file which will reside inside the root of the project but for larger projects you can create a config directory which could contain multiple config files for various purposes or environments such as staging and production.</p>

<p>My configuration file is pretty straight forward and contains some basic variables that I use throughout the site:</p>

<figure>
    <img src="/assets/images/config.jpg" alt="My Hugo configuration file" loading="lazy">
    <figcaption>My Hugo configuration file</figcaption>
</figure>

<p>Custom parameters can be added to your config file, which will be available globally in your project. These are defined by adding [params] followed by each variable on a new line.</p>

<p>Once these params are added you can access them throughout the project by using the following syntax, changing out the last value for the desired key:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ $.Site.Params.title }}</div></code></pre>

<h2>Additional Setup:</h2>

<p>I needed to add a few additional packages to my project, Tailwind, PostCSS and Autoprefixer which are installed by running the following commands chained together:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>npm i tailwindcss &amp;&amp; npm i postcss &amp;&amp; npm i autoprefixer</div></code></pre>

<p>I use Tailwind for all of my personal projects, it provides a fantastic base to work with when starting new projects. PostCSS can be used to require a wide variety of additional plugins including the above mentioned Tailwind and Autoprefixer. I initialize Tailwind and create a postcss.config.js file with the following commands:</p>

<pre><code class='language-bash torchlight' style=''><div class='line'>npx tailwind init &amp;&amp; touch postcss.config.js</div></code></pre>

<p>The first command initializes a blank Tailwind configuration file followed by creating the PostCSS configuration file.</p>

<p>Once this is created I add the following:</p>

<figure>
    <img src="/assets/images/postcss-config.jpg" alt="My PostCSS configuration file" loading="lazy">
    <figcaption>My PostCSS configuration file</figcaption>
</figure>

<h2>Adding Layouts:</h2>

<p>There are various types of layout files that can be created in Hugo, and they all serve a specific purpose. The two most common layouts are baseof.html, list.html and single.html.</p>

<p>In order to create a set of default layouts, you will need to create a directory called _default inside the layouts' directory. This will house the default layouts used through the website. I created a baseof.html, list.html and single.html.</p>

<p>The baseof.html template is the master template for the website, inside this template you would include your head, main and footer tags, as well as any style, script or meta tags that you wish to use.</p>

<p>Layout files include a construct called blocks, which allow you to define parts of the website such as the main content, which are then filled with your page/post content.</p>

<p>A block can be defined with the following syntax:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ block &quot;main&quot; . }} {{ end }}</div></code></pre>

<p>This creates a block called main, which will house the content of a post or page.</p>

<p>My baseof.html template is slightly more complex than what might suit most people, a simpler baseof.html file with blocks could look like this:</p>

<figure>
    <img src="/assets/images/base.jpg" alt="A simple baseof.html template file" loading="lazy">
    <figcaption>A simple baseof.html template file</figcaption>
</figure>

<p>When working with the baseof.html template, it is important to note that should you wish to create a home page that differs from this structure, you will need to create a separate template which will override this.</p>

<p>In order to create a home page template, create a file inside the root of the layouts' directory called index.html. The markup used inside this template will be used solely for the home page.</p>

<figure>
    <img src="/assets/images/home.jpg" alt="A simple home page template" loading="lazy">
    <figcaption>A simple home page template</figcaption>
</figure>

<p>The content of this page can be pulled in via a markdown file inside the content directory. I chose to use markdown, so I created a file named _index.md. If you choose to not make use of a markdown file, you can also use HTML and avoid creating an _index.md file altogether.</p>

<p>To create a page template, a single.html must be created inside the _default directory to display its content, which can include optional markup if needed. My single.html simply makes use of the main block and fills it with the content of my pages. I do not need any custom markup for my pages so the following suits my needs:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ define &quot;main&quot; }}</div><div class='line'>{{ .Content }}</div><div class='line'>{{ end }}</div></code></pre>

<p>In my project I do not use this template for my posts because my requirements for this template are slightly more complex. In order to create a specific layout for my posts, I created a directory within layouts called posts and then added a single.html file. Creating this folder indicates that this layout is purely for the posts content type. The reason I chose to not use the default single.html is because I wanted to be able to update the meta tags, add a canonical link for each post and add some additional markup that is used purely on posts.</p>

<p>Inside my posts template I define meta which will be used for each post, this includes twitter cards, open graph meta tags and a canonical link for my post. This meta is then injected into the head tags of my website.</p>

<pre><code class='torchlight' style=''><div class='line'>{{ define &quot;meta&quot; }}</div><div class='line'>{{ end }}</div><div class='line'></div><div class='line'>{{ define &quot;main&quot; }}</div><div class='line'>{{ end }}</div></code></pre>

<p>In order to display a list of posts on my posts page I created a list.html template inside the layouts/posts directory. This template needed to have the ability to paginate posts, luckily Hugo already ships with some boilerplate code known as internal templates. Internal templates cover a lot of common use cases such as pagination, google analytics, disqus comments and more.</p>

<p>I included the pagination.html template using the following syntax:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ template &quot;_internal/pagination.html&quot; .  }}</div></code></pre>

<p>To make use of this pagination template, I had to create a range loop which will loop through everything which has the content type of posts. I created a variable called $paginator, set which content type I wanted to loop through and set the loop to iterate through my posts:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ $paginator := .Paginate (where .Pages &quot;Type&quot; &quot;posts&quot; ) }}</div><div class='line'>{{ range $paginator.Pages }}</div><div class='line'>{{ .Title }}</div><div class='line'>{{ end }}</div></code></pre>

<p>This will loop through the content inside my posts directory and output the titles of each post which is specified in the frontmatter variables. The default number of paginated posts is 10 per page which can be overridden inside your config.toml file by adding the "paginate" variable followed by your desired value:</p>

<pre><code class='torchlight' style=''><div class='line'>Paginate: 5</div></code></pre>

<p>The final layout which I created was a custom 404.html template which follows the same structure as a single.html template. This template will be used when a user attempts to visit a broken link, or a link that does not exist.</p>

<pre><code class='torchlight' style=''><div class='line'>{{ define &quot;main&quot; }}</div><div class='line'>&lt;h1&gt;Oops!&lt;/h1&gt;</div><div class='line'>{{ end }}</div></code></pre>

<h2>Adding Partials:</h2>

<p>A partial is a file that is used to include something on a page, this could be anything from a newsletter signup form or a header/footer component etc. Partials will be used to include components that are reused throughout the site and serves as a handy method to avoid duplicate code. Partials can be created by adding a partials' directory inside the layouts' directory. Once you have created your partial, you can include that file by using the following syntax in the desired location of your project:</p>

<pre><code class='torchlight' style=''><div class='line'>{{ partial &quot;header.html&quot; . }}</div></code></pre>

<h2>Adding Page Content:</h2>

<p>Page content can be pulled into layouts via a variety of data sources, the most common is by using markdown files, but you can also use plain HTML. Pages live inside the content directory with the file name corresponding to the page name, such as about.html or contact.html.</p>

<p>Hugo allows pages to specify frontmatter variables at the top of each file, which follow the same format as markdown:</p>

<pre><code class='language-markdown torchlight' style=''><div class='line'>---</div><div class='line'>title: &quot;About&quot;</div><div class='line'>menu: main</div><div class='line'>weight: 1</div><div class='line'>---</div></code></pre>

<p>The above syntax indicates that the title of the page is "About", it is visible inside the main menu and specifies a weight of 1.</p>

<p class="highlight">
    <a href="https://gohugo.io/templates/lists/#by-weight">Weighting</a> will be used to specify the order of the pages in the navigation menu, this means that if you add additional pages with the weight of 2, it will be displayed after the "About" page.
</p>

<p>Directly below the frontmatter variables will be the page content, this can be in the form of plain text using markdown syntax or HTML.</p>

<h2>Adding Post Content:</h2>

<p>Posts will be added similarly to pages, they also reside inside the content directory, however if you have created a blog or posts archetype, you would create a blog/posts directory inside the content directory. This would separate your pages and posts content into the appropriate directories.</p>

<p>A key difference with posts and pages is the frontmatter variables. It is considered good practice to add a title, date/publication date, and a slug that will be used for the post. Further variables can be specified such as a description, but these cover the most common use cases.</p>

<h2>Deploying to Netlify:</h2>

<p>The final step was to deploy this website to Netlify. I was previously hosting my website on the Vercel platform but decided to migrate back to Netlify simply because I find the platform to be more user and developer friendly. Netlify also offers a whole host of features that Vercel does not, such as <a href="https://docs.netlify.com/configure-builds/build-plugins/">build plugins</a>, <a href="https://www.netlify.com/products/analytics/">analytics</a> and more.</p>

<p>If you have worked with Netlify you might know that you can create an optional netlify.toml file which allows you to specify additional configuration options for your project. My config file is relatively straight forward:</p>

<figure>
    <img src="/assets/images/netlify.jpg" alt="My Netlify configuration file" loading="lazy">
    <figcaption>My Netlify configuration file</figcaption>
</figure>

<p>I specify the defaults to be used when building my project. The build command for my project is hugo followed by --minify which will minify the project at build time, and I set the default publish directory to be used which is public.</p>

<p>The last optional configuration that I specify is the default version of Hugo to be used when building my project followed by the default hugo environment which is set to production.</p>

<p>I use GitHub for my personal projects, to push this project to the Netlify platform was as simple as importing the project into Netlify, the config file then populates my settings and deploys the project to a vanity URL. After changing my domain settings the process was complete!</p>

<h2>Conclusion:</h2>

<p>I have thoroughly enjoyed working with Hugo and Netlify once again. There have been a few minor frustrations along the way but that has purely been down to my own understanding of Hugo. However, a quick Google search has often yielded the answers to the questions I had. While my project is relatively simple, and I have not developed any complicated layouts I am happy with Hugo and I can’t find fault in anything that it sets out to achieve. It suits my needs, and I look forward to adding further features to this project as well as working on new projects that utilize this framework.</p>

<p>If you are looking for an incredibly fast static site generator, Hugo ticks all the boxes.</p>

<p>If you are looking for a new challenge and framework, I cannot recommend it enough.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Tue, 23 Jun 2020 10:46:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[2020 Website Refresh]]></title>
                <link>https://jethromay.dev/blog/2020-website-refresh</link>
                <guid isPermaLink="true">https://jethromay.dev/blog/2020-website-refresh</guid>
                <description><![CDATA[Web developer and content creator.]]></description>
                <content:encoded><![CDATA[<p>With the advent of 2020, I decided that it was time to launch a brand-new website. Not only did I want to refresh the look and feel of my website, but I also wanted to create a platform where I could share my thoughts as well as the knowledge I have learnt throughout my career thus far, hopefully helping other developers.</p>

<p>When it came to designing the website, I decided that I wanted to focus on minimalism and develop a site that's main focus was the content. I did not want a website that looked busy or overly flashy. It had to be clean, legible and have subtle nuances that complimented the overall look and feel of the website.</p>

<p>My development requirements were pretty simple. It needed to first and foremost have the ability to display blog posts. I quite liked the idea of using markdown files and being able to have my posts in the same repository as the website which could be viewed by anyone. It needed to utilize semantic HTML markup, which I suppose is not a requirement but more of personal preference and best practice. I also needed to have a form where viewers of the website could sign up to my mailing list. For my mailing list, I decided to go with Mailchimp because of their extremely generous free plan. I decided against adding a contact form because I have yet to see any real benefit from adding one to my website.</p>

<p>I recently discovered Tailwind, a utility-first CSS framework that allows for rapid development of custom designs. After playing around with it for a few weeks, I immediately fell in love. The great thing about it is that it allows the developer the ability to customize every aspect of the framework, from default container size to custom breakpoints and so much more. Gone are the days of being restricted to opinionated styles that are a nightmare to override. I thus began developing a static version of my new website using Tailwind. It was slightly challenging at first, mainly due to not knowing what the naming conventions were. I began to realize how it all pieced together after developing a variety of different components and pages.</p>

<p>Having chosen my preferred front-end development framework, I needed to decide on what the rest of the stack would be. I played around with a few ideas, being a PHP developer by trade I initially built this website in Laravel. I have a strong passion for the framework as well as the entire eco-system. However, this did not fit my needs. I wanted to build something that utilized the JAM stack, simply because it was something different and would be a fantastic learning experience. An added benefit and most certainly a big plus is that you can host your website for free, the only added cost being the purchase of a domain. For further information on what the JAM stack is, a brief guide is available here.</p>

<p>Shortly after this decision to go down the JAM stack route, I discovered Gatsby, which is a framework based on top of React. I have immense respect for this framework and what the team behind it are currently doing and will most certainly use it again. However, after developing a further iteration of my website, I found that it did not fit my needs either. I began searching for an alternative. My short term goal at this point was to find something which allowed me to keep using React and not abandon it altogether.</p>

<p>Not long after this, I stumbled upon Vercel and Next.js. Having read the majority of the documentation, this was exactly how I wanted to build my new website. It combined simplicity with modern development processes and technologies and most importantly allowed me to keep using React.</p>

<p>The most challenging part of migrating to this framework and platform was wrapping my head around the deployment process and how to add/update domain-related settings. If Google didn't have the answers, I found quite a few on their Spectrum community forum, which is very beneficial!</p>

<p>I will be writing further blog posts about Next.js, Vercel and various other topics in the coming weeks and months, which will hopefully guide other developers in setting up their projects, so stay tuned!</p>

<p>This website will remain an ongoing work in progress, which you will be able to follow on my Twitter account as i gradually add or replace features.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jethro May</dc:creator>
                <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>

                            </item>
            </channel>
</rss>
